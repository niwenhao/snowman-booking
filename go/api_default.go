/*
 * スキー予約サービス
 *
 * このサービスはスキーのサポートをするため、スキー場、スキー場の天気、スキー場のホテル、ホテルの予約などの機能を提供する。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"ResortsGet": Route{
			strings.ToUpper("Get"),
			"/v1/resorts",
			c.ResortsGet,
		},
		"ResortsResortIdHotelsGet": Route{
			strings.ToUpper("Get"),
			"/v1/resorts/{resortId}/hotels",
			c.ResortsResortIdHotelsGet,
		},
		"ResortsResortIdHotelsHotelIdBookingsPut": Route{
			strings.ToUpper("Put"),
			"/v1/resorts/{resortId}/hotels/{hotelId}/bookings",
			c.ResortsResortIdHotelsHotelIdBookingsPut,
		},
	}
}

// ResortsGet - スキー場の一覧を取得する。
func (c *DefaultAPIController) ResortsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ResortsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResortsResortIdHotelsGet - スキー場のホテル一覧を取得する。
func (c *DefaultAPIController) ResortsResortIdHotelsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resortIdParam, err := parseNumericParameter[int32](
		params["resortId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ResortsResortIdHotelsGet(r.Context(), resortIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResortsResortIdHotelsHotelIdBookingsPut - ホテルの予約をとる。
func (c *DefaultAPIController) ResortsResortIdHotelsHotelIdBookingsPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resortIdParam, err := parseNumericParameter[int32](
		params["resortId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	hotelIdParam, err := parseNumericParameter[int32](
		params["hotelId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bookingParam := Booking{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bookingParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBookingRequired(bookingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBookingConstraints(bookingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ResortsResortIdHotelsHotelIdBookingsPut(r.Context(), resortIdParam, hotelIdParam, bookingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
