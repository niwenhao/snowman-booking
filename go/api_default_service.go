/*
 * スキー予約サービス
 *
 * このサービスはスキーのサポートをするため、スキー場、スキー場の天気、スキー場のホテル、ホテルの予約などの機能を提供する。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"
)

// DefaultAPIService is a service that implements the logic for the DefaultAPIServicer
// This service should implement the business logic for every endpoint for the DefaultAPI API.
// Include any external packages or services that will be required by this service.
type DefaultAPIService struct {
}

// NewDefaultAPIService creates a default api service
func NewDefaultAPIService() DefaultAPIServicer {
	return &DefaultAPIService{}
}

// ResortsGet - スキー場の一覧を取得する。
func (s *DefaultAPIService) ResortsGet(ctx context.Context) (ImplResponse, error) {
	// TODO - update ResortsGet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []Object{}) or use other options such as http.Ok ...
	// return Response(200, []Object{}), nil

	resorts := [...]Resort{
		Resort{
			Id:      1,
			Name:    "岩原スキー場",
			Address: "〒949-6103新潟県南魚沼郡湯沢町土樽731-79",
			Weather: []ResortWeatherInner{
				ResortWeatherInner{
					Weather:   "sunny",
					WindSpeed: 5,
					SnowDepth: 50,
				},
			},
		},
		Resort{
			Id:      2,
			Name:    "蔵王温泉スキー場",
			Address: "〒990-2301山形県山形市蔵王温泉",
			Weather: []ResortWeatherInner{
				ResortWeatherInner{
					Weather:   "sunny",
					WindSpeed: 5,
					SnowDepth: 50,
				},
			},
		},
	}

	return Response(200, resorts), nil
}

// ResortsResortIdHotelsGet - スキー場のホテル一覧を取得する。
func (s *DefaultAPIService) ResortsResortIdHotelsGet(ctx context.Context, resortId int32) (ImplResponse, error) {
	// TODO - update ResortsResortIdHotelsGet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []Object{}) or use other options such as http.Ok ...
	// return Response(200, []Object{}), nil

	if resortId == 1 {
		hotels := []Hotel{
			Hotel{
				Id:      1,
				Name:    "湯沢湯沢でんき屋",
				Address: "〒949-6103 新潟県, 湯沢町, 土樽155",
				TelNo:   "123-456-7890",
			},
			Hotel{
				Id:      2,
				Name:    "エンゼルリゾート湯沢",
				Address: "〒949-6103 新潟県, 湯沢町",
				TelNo:   "234-567-8901",
			},
		}
		return Response(200, hotels), nil
	}

	if resortId == 2 {
		hotels := []Hotel{
			Hotel{
				Id:      3,
				Name:    "高砂屋旅館",
				Address: "〒990-2301 山形県, 蔵王温泉, 蔵王温泉23",
				TelNo:   "123-456-7890",
			},
			Hotel{
				Id:      2,
				Name:    "深山荘高見屋",
				Address: "〒990-2301 山形県, 蔵王温泉, 蔵王温泉54",
				TelNo:   "234-567-8901",
			},
		}
		return Response(200, hotels), nil
	}

	return Response(http.StatusNotImplemented, nil), errors.New("ResortsResortIdHotelsGet method not implemented")
}

// ResortsResortIdHotelsHotelIdBookingsPut - ホテルの予約をとる。
func (s *DefaultAPIService) ResortsResortIdHotelsHotelIdBookingsPut(ctx context.Context, resortId int32, hotelId int32, booking Booking) (ImplResponse, error) {
	// TODO - update ResortsResortIdHotelsHotelIdBookingsPut with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Booking{}) or use other options such as http.Ok ...
	// return Response(200, Booking{}), nil

	// TODO: Uncomment the next line to return response Response(404, Message{}) or use other options such as http.Ok ...
	// return Response(404, Message{}), nil

	return Response(200, booking), nil

}
